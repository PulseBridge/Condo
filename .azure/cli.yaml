parameters:
  name: condo
  env: {}
  secrets: {}

jobs:
- job: ${{ parameters.name }}
  steps:
  - script: /usr/bin/condo --no-color --verbosity $CONDO_VERBOSITY -- /t:$CONDO_TARGET
    name: condo_execute
    displayName: execute condo
    env:
      CONDO_VERBOSITY: ${{ coalesce(variables['condo.verbosity'], 'normal') }}
      CONDO_TARGET: ${{ coalesce(variables['condo.target'], 'ci') }}
      ${{ insert }}: ${{ parameters.env }}
      ${{ if ne(variables['system.accesstoken'], '') }}:
        SYSTEM_ACCESSTOKEN: $(system.accesstoken)
      ${{ if ne(variables['docker.registry.password'], '') }}:
        DOCKER_REGISTERY_USERNAME: $(docker.registry.username)
      ${{ if ne(variables['docker.registry.password'], '') }}:
        DOCKER_REGISTERY_USERNAME_BASE64: $(docker.registry.username.base64)
      ${{ if ne(variables['docker.registry.password'], '') }}:
        DOCKER_REGISTRY_PASSWORD: $(docker.registry.password)
      ${{ if ne(variables['docker.registry.password.base64'], '') }}:
        DOCKER_REGISTRY_PASSWORD_BASE64: $(docker.registry.password.base64)
      ${{ if ne(variables['package.feed.username'], '') }}:
        PACKAGE_FEED_USERNAME: $(package.feed.username)
      ${{ if ne(variables['package.feed.password'], '') }}:
        PACKAGE_FEED_PASSWORD: $(package.feed.password)
      ${{ insert }}: ${{ parameters.secrets }}

  - task: CopyFiles@2
    name: condo_copy_logs
    displayName: copy logs
    condition: and(always(), ne(variables['system.accesstoken'], ''))
    inputs:
      SourceFolder: artifacts
      Contents: |
        *.log
        *.rsp
      TargetFolder: '$(build.artifactstagingdirectory)/logs'
      CleanTargetFolder: true
      OverWrite: true

  - task: PublishBuildArtifacts@1
    name: condo_push_logs
    displayName: publish logs
    condition: and(always(), ne(variables['system.accesstoken'], ''))
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)/logs'
      ArtifactName: Logs

  - task: PublishTestResults@2
    name: condo_push_tests
    displayName: publish test results
    condition: always()
    inputs:
      testRunner: VSTest
      testResultsFiles: 'artifacts/test/*.trx'
      mergeTestResults: true

  - task: PublishCodeCoverageResults@1
    name: condo_push_coverage
    displayName: publish code coverage results
    condition: always()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: artifacts/test/coverage.xml
