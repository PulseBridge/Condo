<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <ChangeLogInitialize Condition=" '$(ChangeLogInitialize)' == '' ">$(MSBuildThisFileDirectory)$(slash)changelog.md</ChangeLogInitialize>
  </PropertyGroup>

  <!-- detect convention strategy -->
  <PropertyGroup Condition=" '$(ConventionStrategyTargets)' == '' ">
    <ConventionStrategy Condition=" '$(ConventionStrategy)' == '' ">Angular</ConventionStrategy>

    <ConventionStrategyTargets>$(MSBuildThisFileDirectory)$(slash)$(ConventionStrategy)$(slash)presets.targets</ConventionStrategyTargets>
  </PropertyGroup>

  <!-- import the convention strategy -->
  <Import Project="$(ConventionStrategyTargets)" />

  <!-- get information about the commits within the repository -->
  <Target Name="GetCommitInfo" Condition="$(HasGit)">
    <GetCommitInfo
      RepositoryRoot="$(RepositoryRoot)"
      IncludeInvalidCommits="$(IncludeInvalidCommits)"
      ActionKeywords="$(ActionKeywords)"
      HeaderPattern="$(HeaderPattern)"
      FieldPattern="$(FieldPattern)"
      RevertPattern="$(RevertPattern)"
      MergePattern="$(MergePattern)"
      HeaderCorrespondence="$(HeaderCorrespondence)"
      MergeCorrespondence="$(MergeCorrespondence)"
      RevertCorrespondence="$(RevertCorrespondence)"
      ReferencePrefixes="$(ReferencePrefixes)"
      MentionPrefixes="$(MentionPrefixes)"
      NoteKeywords="$(NoteKeywords)"
      From="$(LatestVersionTag)">
      <Output TaskParameter="From" PropertyName="CommitFrom" />
      <Output TaskParameter="To" PropertyName="CommitTo" />
    </GetCommitInfo>
  </Target>

  <!-- update semantic version -->
  <Target Name="RecommendVersion" Condition="$(HasGit)">
    <RecommendVersion
      LatestVersion="$(LatestVersion)"
      LatestVersionCommit="$(LatestVersionCommit)"
      MinorCorrespondence="$(MinorCorrespondence)"
      MinorValue="$(MinorValue)"
      BuildQuality="$(BuildQuality)">
      <Output TaskParameter="CurrentRelease" PropertyName="CurrentRelease" />
      <Output TaskParameter="NextRelease" PropertyName="NextRelease" />
    </RecommendVersion>
  </Target>

  <!-- write the changelog -->
  <Target Name="SaveChangeLog" Condition="$(HasGit)">
    <GetCommitInfo
      RepositoryRoot="$(RepositoryRoot)"
      IncludeInvalidCommits="false"
      ActionKeywords="$(ActionKeywords)"
      HeaderPattern="$(HeaderPattern)"
      FieldPattern="$(FieldPattern)"
      RevertPattern="$(RevertPattern)"
      MergePattern="$(MergePattern)"
      HeaderCorrespondence="$(HeaderCorrespondence)"
      MergeCorrespondence="$(MergeCorrespondence)"
      RevertCorrespondence="$(RevertCorrespondence)"
      ReferencePrefixes="$(ReferencePrefixes)"
      MentionPrefixes="$(MentionPrefixes)"
      NoteKeywords="$(NoteKeywords)" />

    <SaveChangeLog
      Name="changelog.md"
      RepositoryRoot="$(RepositoryRoot)"
      GroupByHeader="$(GroupByHeader)"
      SortByHeader="$(SortByHeader)"
      ChangeLogInitialize="$(ChangeLogInitialize)"
      Partials="@(ChangeLogPartials)"
      Template="$(ChangeLogTemplate)"
      ChangeLogTypes="$(ChangeLogTypes)"
      ChangeLogNames="$(ChangeLogNames)" />
  </Target>

  <Target Name="TagVersion" Condition=" $(CI) AND $(HasGit) ">
    <SetGitTag RepositoryRoot="$(RepositoryRoot)" Tag="$(InformationalVersion)" />
  </Target>

  <Target Name="CreateRelease" Condition=" $(CI) AND $(HasGit) AND !$(IsPullRequest) ">
    <PropertyGroup>
      <AuthorName Condition=" '$(AuthorName)' == '' ">$(GIT_AUTHOR_NAME)</AuthorName>
      <AuthorName Condition=" '$(AuthorName)' == '' ">$(Company)</AuthorName>
      <AuthorName Condition=" '$(AuthorName)' == '' ">$(Authors)</AuthorName>
      <AuthorName Condition=" '$(AuthorName)' == '' ">condo</AuthorName>

      <AuthorEmail Condition=" '$(AuthorEmail)' == '' ">$(GIT_AUTHOR_EMAIL)</AuthorEmail>
      <AuthorEmail Condition=" '$(AuthorEmail)' == '' ">condo@pulsebridge</AuthorEmail>
    </PropertyGroup>

    <CreateRelease
      RepositoryRoot="$(RepositoryRoot)"
      Branch="$(Branch)"
      Version="$(VersionTag)$(InformationalVersion)"
      RemoteUri="$(RepositoryUri)"
      ReleaseMessage="$(ReleaseMessage)"
      AuthorName="$(AuthorName)"
      AuthorEmail="$(AuthorEmail)" />
  </Target>

  <PropertyGroup>
    <BeforeVersion>
      $(BeforeVersion);
      GetCommitInfo;
      RecommendVersion;
    </BeforeVersion>

    <AfterPublish>
      TagVersion;
      SaveChangeLog;
      CreateRelease;
      $(AfterPublish);
    </AfterPublish>
  </PropertyGroup>
</Project>
