<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- default to visual studio "15" -->
    <VisualStudioVersion Condition=" '$(VisualStudioVersion)' == '' ">15.0</VisualStudioVersion>

    <!-- get the directory separator character for the current platform used to keep paths consistent -->
    <Slash>$([System.IO.Path]::DirectorySeparatorChar)</Slash>

    <!-- define the default project name -->
    <ProjectName Condition=" '$(ProjectName)' == '' ">$(MSBuildProjectName)</ProjectName>

    <!-- get the solution and package root paths -->
    <RepositoryRoot     Condition=" '$(RepositoryRoot)'     == '' ">$(MSBuildStartupDirectory)</RepositoryRoot>
    <SrcRoot            Condition=" '$(SrcRoot)'            == '' ">$([System.IO.Path]::Combine('$(RepositoryRoot)', 'src'))</SrcRoot>
    <TestRoot           Condition=" '$(TestRoot)'           == '' ">$([System.IO.Path]::Combine('$(RepositoryRoot)', 'test'))</TestRoot>
    <ArtifactsRoot      Condition=" '$(ArtifactsRoot)'      == '' ">$([System.IO.Path]::Combine('$(RepositoryRoot)', 'artifacts'))</ArtifactsRoot>

    <BuildArtifactsRoot     Condition=" '$(BuildArtifactsRoot)'     == '' ">$([System.IO.Path]::Combine('$(ArtifactsRoot)', 'build'))</BuildArtifactsRoot>
    <TestArtifactsRoot      Condition=" '$(TestArtifactsRoot)'      == '' ">$([System.IO.Path]::Combine('$(ArtifactsRoot)', 'test'))</TestArtifactsRoot>
    <PublishArtifactsRoot   Condition=" '$(PublishArtifactsRoot)'   == '' ">$([System.IO.Path]::Combine('$(ArtifactsRoot)', 'publish'))</PublishArtifactsRoot>
    <PackageArtifactsRoot   Condition=" '$(PackageArtifactsRoot)'   == '' ">$([System.IO.Path]::Combine('$(ArtifactsRoot)', 'packages'))</PackageArtifactsRoot>
    <FeedArtifactsRoot      Condition=" '$(FeedArtifactsRoot)'      == '' ">$([System.IO.Path]::Combine('$(ArtifactsRoot)', 'feed'))</FeedArtifactsRoot>
    <DocsArtifactsRoot      Condition=" '$(DocsArtifactsRoot)'      == '' ">$([System.IO.Path]::Combine('$(ArtifactsRoot)', 'docs'))</DocsArtifactsRoot>

    <AgentTargetsRoot Condition=" '$(AgentTargetsRoot)' == '' ">$(CondoTargetsPath)\Agents\</AgentTargetsRoot>
    <BuildHost Condition=" '$(BuildHost)' == '' AND ('$(TF_BUILD)' != '' Or '$(SYSTEM_DEFINITIONID)' != '') ">VSTS</BuildHost>
    <BuildHost Condition=" '$(BuildHost)' == '' AND '$(TRAVIS)' != '' ">Travis</BuildHost>
    <BuildHost Condition=" '$(BuildHost)' == '' AND '$(APPVEYOR)' != '' ">AppVeyor</BuildHost>

    <AgentTargetsPath Condition=" '$(AgentTargetsPath)' == '' ">$(AgentTargetsRoot)$(BuildHost).targets</AgentTargetsPath>
  </PropertyGroup>

  <ItemGroup>
    <ArtifactPaths Include="$(BuildArtifactsRoot)" />
    <ArtifactPaths Include="$(TestArtifactsRoot)" />
    <ArtifactPaths Include="$(PublishArtifactsRoot)" />
    <ArtifactPaths Include="$(PackageArtifactsRoot)" />
    <ArtifactPaths Include="$(FeedArtifactsRoot)" />
    <ArtifactPaths Include="$(DocsArtifactsRoot)" />
  </ItemGroup>

  <!-- import default agent configuration -->
  <Import Project="$(AgentTargetsRoot)Defaults.targets" />

  <!-- import agent configuration -->
  <Import Project="$(AgentTargetsPath)" Condition=" Exists('$(AgentTargetsPath)') " />

  <!-- determine if the repository is managed by git -->
  <PropertyGroup>
    <IsPullRequest Condition=" '$(PullRequestId)' != '' ">True</IsPullRequest>
    <RepositoryProvider Condition=" '$(RepositoryProvider)' == '' AND Exists('$(RepositoryRoot)$(slash).git') ">git</RepositoryProvider>
  </PropertyGroup>

  <ItemGroup>
    <!-- locate all npm, bower, gulp, and grunt projects -->
    <NpmInstallPaths Include="$(RepositoryRoot)$(Slash)**$(Slash)package.json" />
    <BowerInstallPaths Include="$(RepositoryRoot)$(Slash)**$(Slash)bower.json" />
    <GulpPaths Include="$(RepositoryRoot)$(Slash)**$(Slash)gulpfile.*" />
    <GruntPaths Include="$(RepositoryRoot)$(Slash)**$(Slash)gruntfile.*" />
    <SubmodulePaths Include="$(RepositoryRoot)$(Slash).gitmodules" />

    <!-- add prefixes to well-known authenticated feeds -->
    <NuGetProtectedFeedPrefixes Include="pkgs.visualstudio.com" />
  </ItemGroup>

  <!-- get server time from NIST -->
  <Target Name="GetServerTime" Condition="$(UseServerTime)">
    <GetServerTime>
      <Output TaskParameter="DateTimeUtc" PropertyName="BuildDateUtc" />
    </GetServerTime>
  </Target>

  <!-- get platform information -->
  <Target Name="GetPlatformInfo">
    <GetPlatformInfo>
      <Output TaskParameter="Platform" PropertyName="Platform" />
      <Output TaskParameter="IsLinux" PropertyName="IsLinux" />
      <Output TaskParameter="IsWindows" PropertyName="IsWindows" />
      <Output TaskParameter="IsMacOS" PropertyName="IsMacOS" />
    </GetPlatformInfo>
  </Target>

  <!-- get repository information -->
  <!-- NOTE: this will not replace values set by environment variables from the build server -->
  <Target Name="GetRepositoryInfo">
    <GetRepositoryInfo
        RepositoryRoot="$(RepositoryRoot)"
        RepositoryUri="$(RepositoryUri)"
        Branch="$(Branch)"
        VersionTagPrefix="$(VersionTagPrefix)"
        CommitId="$(CommitId)">
      <Output TaskParameter="RepositoryRoot" PropertyName="RepositoryRoot" />
      <Output TaskParameter="RepositoryUri" PropertyName="RepositoryUri" />
      <Output TaskParameter="ClientVersion" PropertyName="GitClientVersion" />
      <Output TaskParameter="LatestVersionTag" PropertyName="LatestVersionTag" />
      <Output TaskParameter="LatestVersion" PropertyName="LatestVersion" />
      <Output TaskParameter="LatestVersionCommit" PropertyName="LatestVersionCommit" />
      <Output TaskParameter="Branch" PropertyName="Branch" />
      <Output TaskParameter="CommitId" PropertyName="CommitId" />
      <Output TaskParameter="HasGit" PropertyName="HasGit" />
    </GetRepositoryInfo>
  </Target>

  <!-- get project metadata based on its location -->
  <Target Name="GetProjectMetadata">
    <ItemGroup Condition=" '@(DotNetSolutions->Count())' == '0' ">
      <DotNetSolutions Include="$(RepositoryRoot)$(slash)*.sln" />
    </ItemGroup>

    <GetProjectsForSolution Solutions="@(DotNetSolutions)" RepositoryRoot="$(RepositoryRoot)">
      <Output TaskParameter="Projects" ItemName="DotNetProjects" />
    </GetProjectsForSolution>

    <GetProjectMetadata Projects="@(DotNetProjects)">
      <Output TaskParameter="Projects" ItemName="Projects" />
    </GetProjectMetadata>

    <ItemGroup>
      <DotNetRestorePaths Include="@(DotNetSolutions)" />

      <SourceProjects Include="@(Projects)" Condition=" '%(Projects.ProjectGroup)' == 'src' "/>
      <TestProjects Include="@(Projects)" Condition=" '%(Projects.ProjectGroup)' == 'test' "/>
      <DocProjects Include="@(Projects)" Condition=" '%(Projects.ProjectGroup)' == 'docs' "/>
      <SampleProjects Include="@(Projects)" Condition=" '%(Projects.ProjectGroup)' == 'samples' "/>
      <ExecutableProjects Include="@(SourceProjects)" Condition=" '%(SourceProjects.OutputType)' == 'exe' " />
    </ItemGroup>
  </Target>

  <!-- set nuget credentials -->
  <Target Name="SetNuGetCredentials" Condition=" '$(PackageFeedUsername)' != '' AND '$(PackageFeedPassword)' != '' ">
    <SetNuGetPackageSources RepositoryRoot="$(RepositoryRoot)"
                         ArtifactsRoot="$(ArtifactsRoot)"
                         Uri="$(PackageFeedUri)"
                         SymbolUri="$(PackageSymbolUri)"
                         Prefixes="@(NuGetProtectedFeedPrefixes)"
                         Username="$(PackageFeedUsername)"
                         Password="$(PackageFeedPassword)">
      <Output TaskParameter="NuGetConfigPath" PropertyName="NuGetConfigPath" />
    </SetNuGetPackageSources>
  </Target>

  <!-- print all of the properties that were used to perform the build -->
  <Target Name="PrintProperties">
    <Message Importance="High" Text="Company            : $(Company)" Condition=" '$(Company)' != '' " />
    <Message Importance="High" Text="Product Name       : $(Product)" />
    <Message Importance="High" Text="Project Name       : $(TeamProject)" Condition=" '$(TeamProject)' != '' " />
    <Message Importance="High" Text="License            : $(License)" Condition=" '$(License)' != '' " />
    <Message Importance="High" Text="License URI        : $(LicenseUri)" Condition=" '$(LicenseUri)' != '' " />
    <Message Importance="High" Text="Date Time (UTC)    : $(BuildDateUtc)" />
    <Message Importance="High" Text="Configuration      : $(Configuration)" />
    <Message Importance="High" Text="Platform           : $(Platform)" />
    <Message Importance="High" Text="Authors            : $(Authors)" />
    <Message Importance="High" Text="Copyright          : $(Copyright)" Condition=" '$(Copyright)' != '' " />
  </Target>

  <!-- print project information -->
  <Target Name="PrintProjects">
    <LogItemMetadata Items="@(Projects)" Name="Project" />
  </Target>

  <!-- print repository information -->
  <Target Name="PrintRepositoryInfo">
    <Message Importance="High" Text="Repository URI     : $(RepositoryUri)" Condition=" '$(RepositoryUri)' != '' " />
    <Message Importance="High" Text="Branch             : $(Branch)" Condition=" '$(Branch)' != '' " />
    <Message Importance="High" Text="Commit ID          : $(CommitId)" />
    <Message Importance="High" Text="Pull Request ID    : $(PullRequestId)" Condition=" '$(PullRequestId)' != '' " />
    <Message Importance="High" Text="Provider           : $(RepositoryProvider)" Condition=" '$(RepositoryProvider)' != '' " />
    <Message Importance="High" Text="Git Support        : $(HasGit)" />
    <Message Importance="High" Text="Git Client Version : $(GitClientVersion)" Condition=" '$(GitClientVersion)' != '' " />
    <Message Importance="High" Text="Latest Version     : $(LatestVersion)" />
    <Message Importance="High" Text="Latest Version Tag : $(LatestVersionTag)" />
    <Message Importance="High" Text="Latest Vesion Hash : $(LatestVersionCommit)" />
  </Target>

  <!-- print build information -->
  <Target Name="PrintBuildInfo">
    <Message Importance="High" Text="Build Name         : $(BuildName)" Condition=" '$(BuildName)' != '' " />
    <Message Importance="High" Text="Build ID           : $(BuildId)" Condition=" '$(BuildId)' != '' " />
    <Message Importance="High" Text="Build For          : $(BuildFor)" Condition=" '$(BuildFor)' != '' " />
    <Message Importance="High" Text="Build On (Agent)   : $(BuildOn)" Condition=" '$(BuildOn)' != '' " />
    <Message Importance="High" Text="Team URI           : $(TeamUri)" Condition=" '$(TeamUri)' != '' " />
    <Message Importance="High" Text="Build URI          : $(BuildUri)" Condition=" '$(BuildUri)' != '' " />
    <Message Importance="High" Text="CI Build           : $(CI)" />
    <Message Importance="High" Text="Package Feed URI   : $(PackageFeedUri)" Condition=" '$(PackageFeedUri)' != '' " />
    <Message Importance="High" Text="Package Symbol URI : $(PackageSymbolUri)" Condition=" '$(PackageSymbolUri)' != '' " />
    <Message Importance="High" Text="Package Feed Key   : $(PackageFeedApiKey)" Condition=" '$(PackageFeedApiKey)' != '' " />
    <Message Importance="High" Text="Package Symbol Key : $(PackageSymbolApiKey)" Condition=" '$(PackageSymbolApiKey)' != '' " />
    <Message Importance="High" Text="Package Username   : $(PackageFeedUsername)" Condition=" '$(PackageFeedUsername)' != '' " />
    <Message Importance="High" Text="Package Password   : $(PackageFeedPassword)" Condition=" '$(PackageFeedPassword)' != '' " />
    <Message Importance="High" Text="NuGet Config Path  : $(NuGetConfigPath)" Condition=" '$(NuGetConfigPath)' != '' " />
  </Target>

  <!-- print all of the paths used to create the build -->
  <Target Name="PrintPaths">
    <Message Importance="High" Text="Repository Root    : $(RepositoryRoot)" />
    <Message Importance="High" Text="Source Projects    : $(SrcRoot)" />
    <Message Importance="High" Text="Test Projects      : $(TestRoot)" />
    <Message Importance="High" Text="Artifacts          : $(ArtifactsRoot)" />
    <Message Importance="High" Text="Artifacts (Build)  : $(BuildArtifactsRoot)" />
    <Message Importance="High" Text="Artifacts (Test)   : $(TestArtifactsRoot)" />
    <Message Importance="High" Text="Artifacts (Publish): $(PublishArtifactsRoot)" />
    <Message Importance="High" Text="Artifacts (Package): $(PackageArtifactsRoot)" />
    <Message Importance="High" Text="Artifacts (Feed)   : $(FeedArtifactsRoot)" />
    <Message Importance="High" Text="Artifacts (Docs)   : $(DocsArtifactsRoot)" />
  </Target>

  <PropertyGroup>
    <InitializeDependsOn>
      $(BeforeInitialize);
      GetServerTime;
      GetPlatformInfo;
      SetNuGetCredentials;
      GetRepositoryInfo;
      GetProjectMetadata;
      PrintProperties;
      PrintRepositoryInfo;
      PrintProjects;
      PrintBuildInfo;
      PrintPaths;
      $(InitializeDependsOn);
      $(AfterInitialize);
    </InitializeDependsOn>
  </PropertyGroup>

  <!-- actually perform the initialization -->
  <Target Name="Initialization" DependsOnTargets="$(InitializeDependsOn)" BeforeTargets="Initialize" />
</Project>
