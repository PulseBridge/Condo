<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="DotNetRestore" Condition=" '$(DotNetRestore)' != 'skip' AND '@(DotNetRestorePaths->Count())' != '0' ">
    <PropertyGroup>
      <DotNetRestoreProperties Condition=" '$(DotNetRestoreProperties)' == '' ">$(DOTNET_RESTORE_PROPS)</DotNetRestoreProperties>

      <DotNetRestoreOptions Condition=" '$(DotNetRestoreOptions)' == '' ">$(DOTNET_RESTORE_OPTIONS)</DotNetRestoreOptions>
      <DotNetRestoreOptions>$(DotNetRestoreOptions.Trim()) --ignore-failed-sources</DotNetRestoreOptions>
      <DotNetRestoreOptions Condition=" '$(NuGetConfigPath)' != '' ">$(DotNetRestoreOptions.Trim()) --configfile &quot;$(NuGetConfigPath)&quot;</DotNetRestoreOptions>

      <DotNetRestoreProperties Condition=" '$(InformationalVersion)' != '' ">$(DotNetRestoreProperties) /p:Version=$(InformationalVersion)</DotNetRestoreProperties>

      <DotNetRestoreArgs>$(DotNetRestoreOptions.Trim()) $(DotNetRestoreProperties.Trim())</DotNetRestoreArgs>
      <DotNetRestoreArgs>$(DotNetRestoreArgs.Trim())</DotNetRestoreArgs>
    </PropertyGroup>

    <ItemGroup>
      <_DotNetRestore Include="@(DotNetRestorePaths)">
        <ProjectName>&quot;%(Filename)%(Extension)&quot;</ProjectName>
        <WorkingDirectory>%(RootDir)%(Directory)</WorkingDirectory>
      </_DotNetRestore>
    </ItemGroup>

    <Exec Command="dotnet restore %(_DotNetRestore.ProjectName) $(DotNetRestoreArgs)"
          WorkingDirectory="%(_DotNetRestore.WorkingDirectory)" />
  </Target>

  <!-- attempt to find npm paths -->
  <Target Name="GetNpmInfo">
    <FindCommand Command="npm">
      <Output TaskParameter="ExecutablePath" PropertyName="NpmPath" />
      <Output TaskParameter="Exists" PropertyName="HasNpm" />
    </FindCommand>

    <ItemGroup>
      <PackageJsonPaths
        Include="$(RepositoryRoot)$(Slash)**$(Slash)package.json"
        Exclude="$(RepositoryRoot)$(Slash)**$(Slash)node_modules$(Slash)**$(Slash)package.json;$(RepositoryRoot)$(Slash)**$(Slash)bower_components$(Slash)**$(Slash)package.json" />

      <FindCommandSearchPaths Include="%(PackageJsonPaths.RootDir)%(PackageJsonPaths.Directory)$(Slash)node_modules$(Slash).bin$(Slash)" />
    </ItemGroup>

    <PropertyGroup>
      <NpmRequired>False</NpmRequired>
      <NpmRequired Condition=" @(PackageJsonPaths->Count()) > 0 ">True</NpmRequired>

      <NpmInstall Condition=" '$(NpmInstall)' != '' AND '$(NpmInstall.ToLower())' != 'true' ">False</NpmInstall>
      <NpmInstall Condition=" '$(NpmInstall)' == '' AND $(HasNpm) AND $(NpmRequired) ">True</NpmInstall>
      <NpmInstall Condition=" '$(NpmInstall)' == '' ">False</NpmInstall>
    </PropertyGroup>

    <Warning Condition=" !$(HasNpm) AND $(NpmRequired) "
             Text="A package.json file was located at: %(PackageJsonPaths.Identity), but the npm command or executable could not be found." />
  </Target>

  <Target Name="NpmInstall" Condition=" $(NpmInstall) ">
    <PropertyGroup>
      <NpmInstallOptions Condition=" '$(NpmInstallOptions)' == '' ">$(NPM_INSTALL_OPTIONS)</NpmInstallOptions>
    </PropertyGroup>

    <GetProjectMetadata Projects="@(PackageJsonPaths)">
      <Output TaskParameter="Projects" ItemName="PackageJsonProjects" />
    </GetProjectMetadata>

    <Exec Command="&quot;$(NpmPath)&quot; set progress=false" />

    <Exec Command="&quot;$(NpmPath)&quot; install $(NpmInstallOptions.Trim())"
          WorkingDirectory="%(PackageJsonProjects.ProjectDir)" />
  </Target>

  <!-- attempt to find bower and bower paths -->
  <Target Name="GetBowerInfo">
    <FindCommand Command="bower" SearchPaths="@(FindCommandSearchPaths)">
      <Output TaskParameter="ExecutablePath" PropertyName="BowerPath" />
      <Output TaskParameter="Exists" PropertyName="HasBower" />
    </FindCommand>

    <ItemGroup>
      <BowerJsonPaths
        Include="$(RepositoryRoot)$(Slash)**$(Slash)bower.json"
        Exclude="$(RepositoryRoot)$(Slash)**$(Slash)node_modules$(Slash)**$(Slash)bower.json;$(RepositoryRoot)$(Slash)**$(Slash)bower_components$(Slash)**$(Slash)bower.json" />
    </ItemGroup>

    <PropertyGroup>
      <BowerRequired>False</BowerRequired>
      <BowerRequired Condition=" @(BowerJsonPaths->Count()) > 0 ">True</BowerRequired>

      <BowerInstall Condition=" '$(BowerInstall)' != '' AND '$(BowerInstall.ToLower())' != 'true' ">False</BowerInstall>
      <BowerInstall Condition=" '$(BowerInstall)' == '' AND $(HasBower) AND $(BowerRequired) ">True</BowerInstall>
      <BowerInstall Condition=" '$(BowerInstall)' == '' ">False</BowerInstall>
    </PropertyGroup>

    <Warning Condition=" !$(HasBower) AND $(BowerRequired) "
             Text="A bower.json file was located at: %(BowerJsonPaths.Identity), but the bower command or executable could not be found." />
  </Target>

  <Target Name="BowerInstall" Condition=" $(BowerInstall) ">
    <PropertyGroup>
      <BowerInstallOptions Condition=" '$(BowerInstallOptions)' == '' ">$(BOWER_INSTALL_OPTIONS)</BowerInstallOptions>
    </PropertyGroup>

    <GetProjectMetadata Projects="@(BowerJsonPaths)">
      <Output TaskParameter="Projects" ItemName="BowerJsonProjects" />
    </GetProjectMetadata>

    <Exec Command="&quot;$(BowerPath)&quot; install $(BowerInstallOptions.Trim())"
          WorkingDirectory="%(BowerJsonProjects.ProjectDir)" />
  </Target>

  <!-- attempt to find polymer and polymer paths -->
  <Target Name="GetPolymerInfo">
    <FindCommand Command="polymer" SearchPaths="@(FindCommandSearchPaths)">
      <Output TaskParameter="ExecutablePath" PropertyName="PolymerPath" />
      <Output TaskParameter="Exists" PropertyName="HasPolymer" />
    </FindCommand>

    <ItemGroup>
      <PolymerJsonPaths
        Include="$(RepositoryRoot)$(Slash)**$(Slash)polymer.json"
        Exclude="$(RepositoryRoot)$(Slash)**$(Slash)node_modules$(Slash)**$(Slash)polymer.json;$(RepositoryRoot)$(Slash)**$(Slash)bower_components$(Slash)**$(Slash)polymer.json;$(RepositoryRoot)$(Slash)**$(Slash)build$(Slash)polymer.json" />
    </ItemGroup>

    <PropertyGroup>
      <PolymerRequired>False</PolymerRequired>
      <PolymerRequired Condition=" @(PolymerJsonPaths->Count()) > 0 ">True</PolymerRequired>

      <PolymerInstall Condition=" '$(PolymerInstall)' != '' AND '$(PolymerInstall.ToLower())' != 'true' ">False</PolymerInstall>
      <PolymerInstall Condition=" '$(PolymerInstall)' == '' AND $(HasPolymer) AND $(PolymerRequired) ">True</PolymerInstall>
      <PolymerInstall Condition=" '$(PolymerInstall)' == '' ">False</PolymerInstall>

      <PolymerBuild Condition=" '$(PolymerBuild)' != '' AND '$(PolymerBuild.ToLower())' != 'true' ">False</PolymerBuild>
      <PolymerBuild Condition=" '$(PolymerBuild)' == '' ">$(PolymerInstall)</PolymerBuild>

      <PolymerTest Condition=" '$(PolymerTest)' != '' AND '$(PolymerTest.ToLower())' != 'true' ">False</PolymerTest>
      <PolymerTest Condition=" '$(PolymerTest)' == '' ">$(PolymerBuild)</PolymerTest>
    </PropertyGroup>

    <Warning Condition=" !$(HasPolymer) AND $(PolymerRequired) "
             Text="A polymer.json file was located at: %(PolymerJsonPaths.Identity), but the polymer command or executable could not be found." />
  </Target>

  <Target Name="PolymerInstall" Condition=" $(PolymerInstall) ">
    <PropertyGroup>
      <PolymerInstallOptions Condition=" '$(PolymerInstallOptions)' == '' ">$(POLYMER_INSTALL_OPTIONS)</PolymerInstallOptions>
    </PropertyGroup>

    <GetProjectMetadata Projects="@(PolymerJsonPaths)">
      <Output TaskParameter="Projects" ItemName="PolymerJsonProjects" />
    </GetProjectMetadata>

    <Exec Command="&quot;$(PolymerPath)&quot; install $(PolymerInstallOptions.Trim())"
          WorkingDirectory="%(PolymerJsonProjects.ProjectDir)" />
  </Target>

  <!-- attempt to find gulp and gulp paths -->
  <Target Name="GetGulpInfo">
    <FindCommand Command="gulp" SearchPaths="@(FindCommandSearchPaths)">
      <Output TaskParameter="ExecutablePath" PropertyName="GulpPath" />
      <Output TaskParameter="Exists" PropertyName="HasGulp" />
    </FindCommand>

    <ItemGroup>
      <GulpFilePaths
        Include="$(RepositoryRoot)$(Slash)**$(Slash)gulpfile.*"
        Exclude="$(RepositoryRoot)$(Slash)**$(Slash)node_modules$(Slash)**$(Slash)gulpfile.*;$(RepositoryRoot)$(Slash)**$(Slash)bower_components$(Slash)**$(Slash)gulpfile.*" />
    </ItemGroup>

    <Warning Condition="!$(HasGulp) AND '$(GulpFilePaths->Count())' != '0' "
             Text="A gulpfile was located at: %(GulpFilePaths.Identity), but the gulp command or executable could not be found." />
  </Target>

  <!-- attempt to find grunt and grunt paths -->
  <Target Name="GetGruntInfo">
    <FindCommand Command="grunt" SearchPaths="@(FindCommandSearchPaths)">
      <Output TaskParameter="ExecutablePath" PropertyName="GruntPath" />
      <Output TaskParameter="Exists" PropertyName="HasGrunt" />
    </FindCommand>

    <ItemGroup>
      <GruntFilePaths
        Include="$(RepositoryRoot)$(Slash)**$(Slash)gruntfile.*"
        Exclude="$(RepositoryRoot)$(Slash)**$(Slash)node_modules$(Slash)**$(Slash)gruntfile.*;$(RepositoryRoot)$(Slash)**$(Slash)bower_components$(Slash)**$(Slash)gruntfile.*" />
    </ItemGroup>

    <Warning Condition="!$(HasGrunt) AND '$(GruntFilePaths->Count())' != '0' "
             Text="A gruntfile was located at: %(GruntFilePaths.Identity), but the grunt command or executable could not be found." />
  </Target>

  <Target Name="SubmoduleRestore" Condition=" '$(SubmoduleRestore)' != 'skip' AND '@(SubmodulePaths->Count())' != '0' AND $(HasGit) ">
    <RestoreSubmodules RepositoryRoot="$(RepositoryRoot)" />
  </Target>

  <Target Name="CreateOutputPaths">
    <MakeDir Directories="@(ArtifactPaths)" ContinueOnError="true" />
  </Target>

  <PropertyGroup>
    <RestoreDependsOn>
      $(BeforeRestore);
      GetNpmInfo;
      NpmInstall;
      GetBowerInfo;
      BowerInstall;
      GetPolymerInfo;
      PolymerInstall;
      DotNetRestore;
      $(RestoreDependsOn);
      $(AfterRestore);
    </RestoreDependsOn>

    <PrepareDependsOn>
      $(BeforePrepare);
      CreateOutputPaths;
      SubmoduleRestore;
      Restore;
      $(PrepareDependsOn);
      $(AfterPrepare);
    </PrepareDependsOn>
  </PropertyGroup>

  <Target Name="Restore" DependsOnTargets="$(RestoreDependsOn)" />

  <Target Name="Preparation" DependsOnTargets="$(PrepareDependsOn)" BeforeTargets="Prepare" />
</Project>
