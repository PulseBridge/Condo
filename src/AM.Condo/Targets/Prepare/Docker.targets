<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- attempt to find docker info -->
  <Target Name="GetDockerInfo">
    <ItemGroup>
      <DockerfilePaths     Include="$(RepositoryRoot)**$(slash)Dockerfile" Exclude="$(DockerRoot)Dockerfile" />
      <DockerfilePaths     Include="$(RepositoryRoot)**$(slash)Dockerfile.*"
                           Exclude="$(DockerRoot)Dockerfile.*;$(RepositoryRoot)**$(slash)Dockerfile.debug;$(RepositoryRoot)**$(slash)Dockerfile.test" />

      <DockerfilePaths     Include="$(RepositoryRoot)Dockerfile" Condition=" Exists('$(RepositoryRoot)Dockerfile') " />

      <DockerComposePaths  Include="$(DockerRoot)docker-compose.*" Exclude="$(DockerRoot)docker-compose.debug.*" />
    </ItemGroup>

    <PropertyGroup>
      <DockerEnabled Condition=" '$(SKIP_DOCKER)' != '' ">false</DockerEnabled>
      <DockerEnabled Condition=" '$(DockerEnabled)' != '' AND '$(DockerEnabled.ToLower())' != 'true' ">false</DockerEnabled>
      <DockerEnabled Condition=" '$(DockerEnabled)' == '' ">true</DockerEnabled>

      <DockerBuildRequired>false</DockerBuildRequired>
      <DockerBuildRequired Condition=" @(DockerfilePaths->Count()) > 0 ">$(DockerEnabled)</DockerBuildRequired>

      <DockerComposeRequired>false</DockerComposeRequired>
      <DockerComposeRequired Condition=" @(DockerComposePaths->Count()) > 0 ">$(DockerEnabled)</DockerComposeRequired>

      <DockerRequired>false</DockerRequired>
      <DockerRequired Condition=" $(DockerBuildRequired) OR $(DockerComposeRequired) ">true</DockerRequired>

      <DockerRegistry Condition=" '$(DockerRegistry)' == '' ">$(DOCKER_REGISTRY_URI)</DockerRegistry>
      <DockerRegistry Condition=" '$(DockerRegistry)' == '' ">https://index.docker.io/v1/</DockerRegistry>
      <DockerRegistry Condition=" !$(DockerRegistry.EndsWith('/')) ">$(DockerRegistry)/</DockerRegistry>

      <DockerOrganization Condition=" '$(DockerOrganization)' == '' ">$(DOCKER_REGISTRY_ORGANIZATION)</DockerOrganization>
      <DockerOrganization Condition=" '$(DockerOrganization)' != '' AND !$(DockerRegistry.StartsWith('http')) ">$(DockerRegistry)$(DockerOrganization)</DockerOrganization>
      <DockerOrganization Condition=" '$(DockerOrganization)' != '' AND !$(DockerOrganization.EndsWith('/')) ">$(DockerOrganization)/</DockerOrganization>

      <DockerEnableExtendedTags Condition=" '$(DockerEnableExtendedTags)' == '' ">$(DOCKER_ENABLE_EXTENDED_TAGS)</DockerEnableExtendedTags>
      <DockerEnableExtendedTags Condition=" '$(DockerEnableExtendedTags)' == '' ">false</DockerEnableExtendedTags>
    </PropertyGroup>

    <GetDockerMetadata
        DockerFiles="@(DockerfilePaths)"
        BuildQuality="$(BuildQuality)"
        Version="$(InformationalVersion)"
        Product="$(Product)"
        RepositoryRoot="$(RepositoryRoot)"
        EnableExtendedTags="$(DockerEnableExtendedTags)"
        Condition=" $(DockerBuildRequired) ">
      <Output TaskParameter="DockerFiles" ItemName="DockerMetadata" />
    </GetDockerMetadata>
  </Target>

  <Target Name="ConfigureDocker">
    <FindCommand Command="docker">
      <Output TaskParameter="ExecutablePath" PropertyName="DockerPath" />
      <Output TaskParameter="Exists" PropertyName="HasDocker" />
    </FindCommand>

    <PropertyGroup>
      <DockerEnabled Condition=" $(DockerEnabled) ">$(HasDocker)</DockerEnabled>

      <DockerBuild Condition=" '$(SKIP_DOCKER_BUILD)' != '' ">false</DockerBuild>
      <DockerBuild Condition=" '$(DockerBuild)' != '' AND '$(DockerBuild.ToLower())' != 'true' ">false</DockerBuild>
      <DockerBuild Condition=" !$(DockerEnabled) ">false</DockerBuild>
      <DockerBuild Condition=" '$(DockerBuild)' == '' ">$(DockerBuildRequired)</DockerBuild>

      <DockerCompose Condition=" '$(SKIP_DOCKER_COMPOSE)' != '' ">false</DockerCompose>
      <DockerCompose Condition=" '$(DockerCompose)' != '' AND '$(DockerCompose.ToLower())' != 'true' ">false</DockerCompose>
      <DockerCompose Condition=" !$(DockerEnabled) ">false</DockerCompose>
      <DockerCompose Condition=" '$(DockerCompose)' == '' ">$(DockerComposeRequired)</DockerCompose>

      <DockerPush Condition=" '$(SKIP_DOCKER_PUSH)' != '' ">false</DockerPush>
      <DockerPush Condition=" '$(DockerPush)' != '' AND '$(DockerPush.ToLower())' != 'true' ">false</DockerPush>
      <DockerPush Condition=" !$(AllowPublish) OR '$(DockerOrganization)' == '' ">false</DockerPush>
      <DockerPush Condition=" '$(DockerPush)' == '' ">$(DockerBuild)</DockerPush>
    </PropertyGroup>

    <Warning Condition="!$(HasDocker) AND $(DockerBuildRequired) "
             Text="A dockerfile was located at: %(DockerfilePaths.Identity), but the docker command or executable could not be found." />

    <Warning Condition="!$(HasDocker) AND $(DockerComposeRequired) "
             Text="A docker-compose file was located at: %(DockerComposePaths.Identity), but the docker command or executable could not be found." />
  </Target>

  <Target Name="PrintDockerProjects" Condition=" $(DockerRequired) ">
    <Message Importance="High" Text="Project: %(DockerMetadata.Label)" />
  </Target>

  <Target Name="DockerLogin" Condition=" $(DockerEnabled) ">
    <DecodeBase64 Encoded="$(DOCKER_REGISTRY_USERNAME_BASE64)" Condition=" '$(DOCKER_REGISTRY_USERNAME_BASE64)' != '' ">
      <Output TaskParameter="Decoded" PropertyName="DockerUsername" />
    </DecodeBase64>

    <DecodeBase64 Encoded="$(DOCKER_REGISTRY_PASSWORD_BASE64)" Condition=" '$(DOCKER_REGISTRY_PASSWORD_BASE64)' != '' ">
      <Output TaskParameter="Decoded" PropertyName="DockerPassword" />
    </DecodeBase64>

    <PropertyGroup>
      <DockerUsername Condition=" '$(DockerUsername)' == '' ">$(DOCKER_REGISTRY_USERNAME)</DockerUsername>
      <DockerPassword Condition=" '$(DockerPassword)' == '' ">$(DOCKER_REGISTRY_PASSWORD)</DockerPassword>

      <DockerLogin Condition=" '$(SKIP_DOCKER_LOGIN)' != '' ">false</DockerLogin>
      <DockerLogin Condition=" '$(DockerLogin)' != '' AND '$(DockerLogin.ToLower())' != 'true' ">false</DockerLogin>
      <DockerLogin Condition=" '$(DockerLogin)' == '' AND '$(DockerUsername)' != '' AND '$(DockerPassword)' != '' ">$(DockerEnabled)</DockerLogin>
      <DockerLogin Condition=" '$(DockerLogin)' == '' ">false</DockerLogin>

      <!-- disable docker push if login credentials are not available -->
      <DockerPush Condition=" $(DockerPush) ">$(DockerLogin)</DockerPush>
    </PropertyGroup>

    <SetDockerConfig Username="$(DockerUsername)" Password="$(DockerPassword)" RegistryUri="$(DockerRegistry)"
                     Condition=" $(DockerLogin) ">
      <Output TaskParameter="ConfigPath" PropertyName="DockerConfigPath" />
    </SetDockerConfig>

    <Message Importance="High" Text="Docker Configuration Path: $(DockerConfigPath)" Condition=" $(DockerLogin) " />
  </Target>

  <PropertyGroup>
    <PrepareDependsOn>
      $(PrepareDependsOn);
      ConfigureDocker;
      DockerLogin;
    </PrepareDependsOn>

    <BeforePrepare>
      $(BeforePrepare);
      GetDockerInfo;
      PrintDockerProjects;
    </BeforePrepare>
  </PropertyGroup>
</Project>
