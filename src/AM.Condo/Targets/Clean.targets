<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="CleanArtifacts">
    <RemoveDir Directories="@(ArtifactPaths)" Condition=" Exists('%(ArtifactPaths.FullPath)') " ContinueOnError="true" />
  </Target>

  <Target Name="CleanIntermediateArtifacts">
    <ItemGroup Condition=" '@(DotNetSolutions->Count())' == '0' ">
      <DotNetSolutions Include="$(RepositoryRoot)*.sln" />
    </ItemGroup>

    <RemoveDuplicates Inputs="@(DotNetSolutions)">
      <Output TaskParameter="Filtered" ItemName="FilteredDotNetSolutions" />
    </RemoveDuplicates>

    <GetProjectsForSolution Solutions="@(FilteredDotNetSolutions)" RepositoryRoot="$(RepositoryRoot)">
      <Output TaskParameter="Projects" ItemName="DotNetProjects" />
    </GetProjectsForSolution>

    <ItemGroup>
      <Projects Include="$(RepositoryRoot)**$(slash)docfx.json" />
    </ItemGroup>

    <GetProjectMetadata Projects="@(Projects)" Product="$(Product)" RepositoryRoot="$(RepositoryRoot)">
      <Output TaskParameter="Projects" ItemName="CleanProjects" />
    </GetProjectMetadata>

    <ItemGroup>
      <IntermediateArtifacts Include="%(CleanProjects.OutputPath)"    Condition=" Exists('%(CleanProjects.OutputPath)') " />
      <IntermediateArtifacts Include="%(CleanProjects.ProjectDir)bin" Condition=" Exists('%(CleanProjects.ProjectDir)bin') " />
      <IntermediateArtifacts Include="%(CleanProjects.ProjectDir)obj" Condition=" Exists('%(CleanProjects.ProjectDir)obj') " />

      <IntermediateFiles Include="%(CleanProjects.CondoAssemblyInfo)" Condition=" Exists('%(CleanProjects.CondoAssemblyInfo)') " />
    </ItemGroup>

    <RemoveDir Directories="@(IntermediateArtifacts)" ContinueOnError="true" />
    <Delete Files="@(IntermediateFiles)" TreatErrorsAsWarnings="true" ContinueOnError="true" />
  </Target>

  <Target Name="CleanRepository" Condition="$(HasGit) AND $(CI)">
    <CleanRepository RepositoryRoot="$(RepositoryRoot)" />
  </Target>

  <PropertyGroup>
    <CleanDependsOn>
      $(BeforeClean);
      CleanArtifacts;
      CleanIntermediateArtifacts;
      $(CleanDependsOn);
      $(AfterClean);
    </CleanDependsOn>

    <BeforeInitialize>
      CleanRepository;
      $(BeforeInitialize);
    </BeforeInitialize>
  </PropertyGroup>

  <Target Name="Cleaning" DependsOnTargets="$(CleanDependsOn)" BeforeTargets="Clean" Condition=" $(CleanEnabled) " />
</Project>
