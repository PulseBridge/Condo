@{/*

dotnet-test
    Executes unit tests for test projects.

dotnet_test_args=''
    The arguments to pass to the test command.

dotnet_test_options='' (Environment Variable: DOTNET_TEST_OPTIONS)
    Additional options to pass to the test command.

dotnet_test_path='$(test_path)'
    The path in which to locate test projects.

dotnet_test_output_path='$(target_path)/test'
    The path in which to store the test results.

dotnet_test_coverage='$(Coverage)'
    A value indicating whether or not to perform code coverage analysis.

    NOTE: Performing code coverage is only supported on Windows at the present time.

base_path='$(CurrentDirectory)'
    The base path in which to locate test projects.

working_path='$(base_path)'
    The working path in which to execute unit tests.

target_path='$(working_path)/artifacts'
    The target path for build artifacts.

target_build_path='$(base_path)/build'
    The targt path in which to locate src projects.

target_test_path='$(base_path)/test'
    The path in which to locate test projects.

*/}

use assembly = 'System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'

use namespace = 'System'
use namespace = 'System.IO'
use namespace = 'System.Web.Script.Serialization'

use import = 'Condo.Build'
use import = 'Files'

default Quiet                   = '${ false }'
default Coverage                = '${ false }'

default configuration           = 'Debug'

default base_path               = '${ Directory.GetCurrentDirectory() }'
default working_path            = '${ base_path }'
default test_path               = '${ Path.Combine(base_path, "test") }'
default target_path             = '${ Build.Get("BUILD_BINARIESDIRECTORY", Path.Combine(base_path, "artifacts")) }'
default target_build_path       = '${ Path.Combine(target_path, "build") }'
default target_test_path        = '${ Build.Get("COMMON_TESTRESULTSDIRECTORY", Path.Combine(target_path, "test")) }'

default dotnet_test_args           = ''
default dotnet_test_path           = '${ test_path }'
default dotnet_test_options        = '${ Build.Get("DOTNET_TEST_OPTIONS") }'
default dotnet_build_output_path   = '${ target_build_path }'
default dotnet_test_output_path    = '${ target_test_path }'
default dotnet_test_coverage       = '${ Coverage }'

@{
    Build.Log.Header("dotnet-test");

    dotnet_test_args = dotnet_test_args.Trim();
    dotnet_test_options = dotnet_test_options.Trim();

    Build.Log.Argument("arguments", dotnet_test_args);
    Build.Log.Argument("options", dotnet_test_options);
    Build.Log.Argument("path", dotnet_test_path);
    Build.Log.Argument("output path", dotnet_test_output_path);
    Build.Log.Header();

    Build.MakeDirectory(dotnet_test_output_path);

    var dotnet_test_exclude = '**/bin/**/project.json';
    var dotnet_test_include = '**/project.json';
    var dotnet_test_folder = Path.GetFullPath(dotnet_test_path);

    if (File.Exists(dotnet_test_folder))
    {
        dotnet_test_include = Path.GetFileName(dotnet_test_folder);
        dotnet_test_folder = Path.GetDirectoryName(dotnet_test_folder);
    }

    var dotnet_test_files = Files.BasePath(dotnet_test_folder)
        .Include(dotnet_test_include)
        .Exclude(dotnet_test_exclude);

    var js = new JavaScriptSerializer();

    foreach (var dotnet_test_file in dotnet_test_files)
    {
        var dotnet_test_file_path = Path.Combine(dotnet_test_folder, dotnet_test_file);
        var dotnet_test_file_text = File.ReadAllText(dotnet_test_file_path);
        var dotnet_test_project = js.DeserializeObject(dotnet_test_file_text) as Dictionary<string, object>;

        object dotnet_test_cmds_obj;

        var dotnet_test_cmds = dotnet_test_project.TryGetValue("commands", out dotnet_test_cmds_obj)
            ? dotnet_test_cmds_obj as Dictionary<string, object>
            : new Dictionary<string, object>();

        object dotnet_test_cmd_obj;

        if (!dotnet_test_cmds.TryGetValue("test", out dotnet_test_cmd_obj))
        {
            continue;
        }

        var dotnet_test_cmd = dotnet_test_cmd_obj as string;

        dotnet_test_folder = Path.GetDirectoryName(dotnet_test_file_path);
        var dotnet_test_name = Path.GetFileName(dotnet_test_folder);

        object dotnet_test_cfgs_obj;

        var dotnet_test_cfgs = dotnet_test_project.TryGetValue("frameworks", out dotnet_test_cfgs_obj)
            ? dotnet_test_cfgs_obj as Dictionary<string, object>
            : new Dictionary<string, object> { { "dnx451", new Dictionary<string, object>() } };

        var dotnet_test_frameworks = dotnet_test_cfgs.Keys.Where(key => key.StartsWith("dnx", StringComparison.OrdinalIgnoreCase));

        foreach (var dotnet_test_framework in dotnet_test_frameworks)
        {
            var dotnet_test_args_current = "test " + (dotnet_test_args ?? "");
            var dotnet_test_options_current = dotnet_test_options ?? "";
            var dotnet_test_coverage_output_file = Path.Combine(dotnet_test_output_path, "coverage", dotnet_test_name + "-" + dotnet_test_framework + "-coverage.xml");
            var dotnet_test_runtime = "default";

            if (dotnet_test_framework.IndexOf("core", StringComparison.OrdinalIgnoreCase) > -1)
            {
                dotnet_test_runtime += " -r coreclr";
            }
            else if (Build.Unix)
            {
                dotnet_test_runtime += " -r mono";
            }
            else
            {
                dotnet_test_runtime += " -r clr";
            }

            var dotnet_coverage_pdb_path = string.Format
                (
                    @"""{0}"";""{1}""",
                    Path.Combine(dotnet_build_output_path, dotnet_test_name.Remove(dotnet_test_name.LastIndexOf('.')), configuration, dotnet_test_framework),
                    Path.Combine(dotnet_test_output_path, dotnet_test_name, configuration, dotnet_test_framework)
                );

            // dotnet_coverage_pdb_path = Path.Combine(dotnet_test_output_path, dotnet_test_name, configuration, dotnet_test_framework);

            if (dotnet_test_cmd.Contains("xunit"))
            {
                var dotnet_test_output_file = Path.Combine(dotnet_test_output_path, dotnet_test_name + "-" + dotnet_test_framework + ".xml");
                dotnet_test_options_current += " -xml \"" + dotnet_test_output_file + "\"";
            }

            ExecuteTests(dotnet_test_args_current.Trim(), dotnet_test_options_current.Trim(), dotnet_test_folder, dotnet_coverage_pdb_path, dotnet_test_coverage_output_file, dotnet_test_runtime, dotnet_test_coverage, Quiet);
        }
    }
}

macro name='ExecuteTests' args='string' options='string' path='string' pdb='string' output='string' runtime='string' coverage='bool' Quiet='bool'
    dnx dnx_args='${ args }' dnx_options='${ options }' dnx_path='${ path }' dnx_runtime='${ runtime }' if='!coverage'
    dotnet-cover dotnet_cover_args='${ args } ${ options }' dotnet_cover_output_path='${ output }' dotnet_cover_path='${ path }' dotnet_cover_pdb_path='${ pdb }' dotnet_cover_runtime='${ runtime }' if='coverage'