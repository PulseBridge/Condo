use namespace = 'System'
use namespace = 'System.Collections.Generic'
use namespace = 'System.Diagnostics'
use namespace = 'System.IO'
use namespace = 'System.Linq'
use namespace = 'System.Net'
use namespace = 'System.Net.Sockets'
use namespace = 'System.Text'
use namespace = 'System.Text.RegularExpressions'

use import = 'Condo.Build'

functions @{
    public static class AssemblyInfo
    {
        private const string AttributeExpression = @"(\[assembly[\s:]+{0}\([\@\""]+)(.*)(\""\)\])";
        private const string MetadataExpression = @"(\[assembly[\s:]+AssemblyMetadata\([@\""]+{0}\""[\,\s]+[@\""]+)(.*)(\""\)\])";

        private const string AttributeFormat = @"[assembly: {0}(@""{1}"")]";
        private const string MetadataFormat = @"[assembly: AssemblyMetadata(""{0}"", @""{1}"")]";

        private const string ValueFormat = @"${{1}}{0}${{3}}";
        private const string BuildDateFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffK";

        private static readonly Lazy<DateTime> UtcFactory = new Lazy<DateTime>(() =>
            {
                // define the server and port used to connect to the time server
                var server = "time.nist.gov";
                var port = 123;

                try
                {
                    // get the current address of the time server from DNS
                    var addresses = Dns.GetHostEntry(server).AddressList;

                    // create the endpoint using the first address in the response
                    var endpoint = new IPEndPoint(addresses[0], port);

                    // create a byte array to retain the request/response from the socket
                    var data = new byte[48];
                    data[0] = 0x1B;

                    // create a new socket to connect to the time server
                    using (var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp))
                    {
                        // connect to the endpoint
                        socket.Connect(endpoint);

                        // wait no more than 3 seconds for the time to be received
                        socket.ReceiveTimeout = 3000;

                        // send the request
                        socket.Send(data);

                        // get the response
                        socket.Receive(data);
                    }

                    // create the seconds and second fraction bits from the time server
                    ulong seconds = (ulong)data[40] << 24 | (ulong)data[41] << 16 | (ulong)data[42] << 8 | (ulong)data[43];
                    ulong fraction = (ulong)data[44] << 24 | (ulong)data[45] << 16 | (ulong)data[46] << 8 | (ulong)data[47];

                    // calculate the total millisconds since 1900
                    var ms = (seconds * 1000) + ((fraction * 1000) / 0x100000000L);

                    // generate the utc time stamp from the response received via NTP
                    var time = (new DateTime(1900, 1, 1, 0, 0, 0, DateTimeKind.Utc)).AddMilliseconds(ms);

                    // return the server time
                    return time;
                }
                catch (Exception)
                {
                    // log a warning
                    Build.Log.Warn(string.Format("date-time: unable to retrieve time from the time server ({0}) on port {1}, reverting to local time", server, port));

                    // use local time
                    return DateTime.UtcNow;
                }
            });

        /// <summary>
        /// The version of the application.
        /// </summary>
        private static Version assemblyVersion = null;

        /// <summary>
        /// Gets the full assembly version.
        /// </summary>
        public static Version Version
        {
            get
            {
                return assemblyVersion;
            }
        }

        /// <summary>
        /// Gets or sets the version of the application.
        /// </summary>
        public static string AssemblyVersion
        {
            get
            {
                return assemblyVersion == null ? null : assemblyVersion.ToString();
            }

            set
            {
                // determine if the value is empty
                if (string.IsNullOrEmpty(value))
                {
                    // clear the version
                    assemblyVersion = null;

                    // clear the build variable
                    Build.Set("BUILD_VERSION", string.Empty);

                    // move on immediately
                    return;
                }

                // define a variable to retain the parsed value
                Version current;

                // attempt to parse the value
                if (!Version.TryParse(value, out current))
                {
                    // throw a new exception if the value could not be parsed
                    throw new ArgumentException("The specified version is not properly formatted.", "value");
                }

                // set the version to the parsed value (forcing the revision to be zero)
                assemblyVersion = new Version(current.Major, current.Minor, current.Build);

                // update the build version environment variable
                Build.Set("BUILD_VERSION", assemblyVersion.ToString());
            }
        }

        /// <summary>
        /// The file version of the application.
        /// </summary>
        private static Version fileVersion = null;

        /// <summary>
        /// Gets or sets the file version of the application.
        /// </summary>
        public static string FileVersion
        {
            get
            {
                return fileVersion == null ? null : fileVersion.ToString();
            }

            set
            {
                // determine if the value is empty
                if (string.IsNullOrEmpty(value))
                {
                    // clear the version
                    fileVersion = null;

                    // move on immediately
                    return;
                }

                // define a variable to retain the parsed value
                Version current;

                // attempt to parse the value
                if (!Version.TryParse(value, out current))
                {
                    // throw a new exception if the value could not be parsed
                    throw new ArgumentException("The specified version is not properly formatted.", "value");
                }

                // set the version to the parsed value
                fileVersion = current;
            }
        }

        /// <summary>
        /// The prerelease tag of the assembly informational version.
        /// </summary>
        private static string prereleaseTag = null;

        public static string PrereleaseTag
        {
            get
            {
                // return the value
                return prereleaseTag;
            }

            set
            {
                // set the value
                prereleaseTag = value;

                // update the environment variables
                Build.Set("DNX_BUILD_VERSION", value);
            }
        }

        /// <summary>
        /// The informational (semantic) version of the application.
        /// </summary>
        private static string informationalVersion = null;

        /// <summary>
        /// Gets or sets the informational (semantic) version of the application.
        /// </summary>
        public static string InformationalVersion
        {
            get
            {
                if (informationalVersion == null)
                {
                    return null;
                }

                return string.IsNullOrEmpty(PrereleaseTag) ? informationalVersion : informationalVersion + '-' + PrereleaseTag;
            }

            set
            {
                // set the value
                informationalVersion = value;
            }
        }

        /// <summary>
        /// The branch from which the application is being built.
        /// </summary>
        private static string branch = null;

        /// <summary>
        /// Gets or sets the branch of the application.
        /// </summary>
        public static string Branch
        {
            get
            {
                return branch;
            }

            set
            {
                // set the value
                branch = value;

                // update the environment variables
                Build.Set("BUILD_SOURCEBRANCH", value);
            }
        }

        /// <summary>
        /// The build identifier of the application.
        /// </summary>
        private static string buildId = null;

        /// <summary>
        /// Gets or sets the build identifier of the application.
        /// </summary>
        public static string BuildId
        {
            get
            {
                return buildId;
            }

            set
            {
                // determine if the value is empty
                if (string.IsNullOrEmpty(value))
                {
                    // clear the build id
                    buildId = null;

                    // update the build environment variable
                    Build.Set("BUILD_BUILDID", value);
                    Build.Set("DNX_ASSEMBLY_FILE_VERSION", value);

                    // move on immediately
                    return;
                }

                // define a variable to retain the parsed value
                int id;

                // attempt to parse the value
                if (!int.TryParse(value, out id) || id < 0)
                {
                    // throw a new argument exception if the value is not properly formatted
                    throw new ArgumentException("The build ID must be a positive integral value.", "value");
                }

                // set the build id
                buildId = value;

                // update the build environment variable
                Build.Set("BUILD_BUILDID", value);
                Build.Set("DNX_ASSEMBLY_FILE_VERSION", value);
            }
        }

        /// <summary>
        /// The commit identifier of the application.
        /// </summary>
        private static string commitId = null;

        /// <summary>
        /// Gets or sets the commit identifier of the application.
        /// </summary>
        public static string CommitId
        {
            get
            {
                return commitId;
            }

            set
            {
                // set the value
                commitId = value;

                // update the build variables
                Build.Set("BUILD_SOURCEVERSION", value);
            }
        }

        /// <summary>
        /// Gets the current date and time as UTC from a time server or local clock if the time server is unavailable.
        /// </summary>
        public static DateTime DateTimeUtc
        {
            get
            {
                return UtcFactory.Value;
            }
        }

        /// <summary>
        /// Gets the current date and time as UTC from a time server or local clock if the time server is unavailable.
        /// </summary>
        public static string BuildDateUtc
        {
            get
            {
                return DateTimeUtc.ToString(BuildDateFormat);
            }
        }

        /// <summary>
        /// The email address or name of the user that requested the build.
        /// </summary>
        private static string builtBy = null;

        /// <summary>
        /// Gets the email address or name of the user that requested the build.
        /// </summary>
        public static string BuiltBy
        {
            get
            {
                // return the value
                return builtBy;
            }

            set
            {
                // set the value
                builtBy = value;

                // update the environment variables
                Build.Set("BUILD_REQUESTEDFOR", value);
            }
        }

        /// <summary>
        /// The name of the machine on which the application is being built.
        /// </summary>
        private static string builtOn = null;

        /// <summary>
        /// Gets or sets the name of the machine on which the application is being built.
        /// </summary>
        public static string BuiltOn
        {
            get
            {
                // return the value
                return builtOn;
            }

            set
            {
                // set the value
                builtOn = value;

                // update the environment variables
                Build.Set("AGENT_NAME", value);
            }
        }

        /// <summary>
        /// The URI for the team that is responsible for the build.
        /// </summary>
        private static string teamUri = null;

        /// <summary>
        /// Gets or sets the URI for the team that is responsible for the build.
        /// </summary>
        public static string TeamUri
        {
            get
            {
                // return the value
                return teamUri;
            }

            set
            {
                // set the value
                teamUri = value;

                // update the environment variables
                Build.Set("SYSTEM_TEAMFOUNDATIONCOLLECTIONURI", value);
            }
        }

        private static string teamProject = null;

        public static string TeamProject
        {
            get
            {
                // return the value
                return teamProject;
            }

            set
            {
                // set the value
                teamProject = value;

                // update the environment variables
                Build.Set("SYSTEM_TEAMPROJECT", value);
            }
        }

        public static string BuildName { get; set; }

        /// <summary>
        /// The URI of the repository from which the code is derived.
        /// </summary>
        private static string repositoryUri = null;

        /// <summary>
        /// Gets or sets the URI of the repository from which the code is derived.
        /// </summary>
        public static string RepositoryUri
        {
            get
            {
                // return the value
                return repositoryUri;
            }

            set
            {
                // set the value
                repositoryUri = value;

                // update the environment variables
                Build.Set("BUILD_REPOSITORY_URI", value);
            }
        }

        /// <summary>
        /// The URI of the build results.
        /// </summary>
        private static string buildUri;

        /// <summary>
        /// Gets or sets the URI of the build results.
        /// </summary>
        public static string BuildUri
        {
            get
            {
                // return the build uri
                return buildUri;
            }

            set
            {
                // set the value
                buildUri = value;

                // update the environment variables
                Build.Set("BUILD_BUILDURI", value);
            }
        }

        private static string pullRequestId;

        public static string PullRequestId
        {
            get
            {
                return pullRequestId;
            }

            set
            {
                pullRequestId = value;

                Build.Set("BUILD_PULLREQUEST", value);

                Build.PullRequest = !string.IsNullOrEmpty(value);
            }
        }

        private static string repositoryProvider;

        public static string RepositoryProvider
        {
            get
            {
                return repositoryProvider;
            }

            set
            {
                repositoryProvider = value;

                Build.Set("BUILD_REPOSITORY_PROVIDER", value);
            }
        }

        public static string Product { get; set; }

        public static string Company { get; set; }

        public static string Copyright { get; set; }

        public static string License { get; set; }

        public static string LicenseUri { get; set; }

        public static void LoadGitMetadata(string path)
        {
            if (!Build.TryGetRepositoryRoot(ref path))
            {
                return;
            }

            var node = Path.Combine(path, @".git", "HEAD");

            if (!File.Exists(node))
            {
                return;
            }

            var head = File.ReadAllText(node);

            var match = Regex.Match(head, "^ref: (?<branch>refs/heads/.*)$");

            if (match.Success)
            {
                if (string.IsNullOrEmpty(AssemblyInfo.Branch))
                {
                    AssemblyInfo.Branch = match.Groups["branch"].Value.Trim();
                }

                if (string.IsNullOrEmpty(AssemblyInfo.CommitId))
                {
                    node = Path.Combine(path, @".git", AssemblyInfo.Branch.Replace("/", Path.DirectorySeparatorChar.ToString()));

                    if (File.Exists(node))
                    {
                        AssemblyInfo.CommitId = File.ReadAllText(node).Trim();
                    }
                }
            }
            else
            {
                Build.Log.Verbose("load-git-metadata: match was not successful");

                if (string.IsNullOrEmpty(AssemblyInfo.CommitId))
                {
                    AssemblyInfo.CommitId = head.Trim();
                }

                if (string.IsNullOrEmpty(AssemblyInfo.Branch))
                {
                    node = Path.Combine(path, @".git\refs\remotes\origin");

                    AssemblyInfo.Branch = AssemblyInfo.FindBranch(node) ?? "<unknown>";
                }
            }

            node = Path.Combine(path, ".git", "config");

            if (!string.IsNullOrEmpty(AssemblyInfo.RepositoryUri) || !File.Exists(node))
            {
                return;
            }

            using (var stream = new StreamReader(node))
            {
                string line;

                while (((line = stream.ReadLine()) != null) && !string.Equals(line.Trim(), "[remote \"origin\"]", StringComparison.OrdinalIgnoreCase)) { }

                if (!string.IsNullOrEmpty(line))
                {
                    match = Regex.Match(stream.ReadLine(), @"^\s+url\s*=\s*(?<url>[^\s]*)\s*$");

                    if (match.Success)
                    {
                        AssemblyInfo.RepositoryUri = match.Groups["url"].Value;

                        if (AssemblyInfo.RepositoryUri.EndsWith(".git"))
                        {
                            AssemblyInfo.RepositoryUri.Substring(0, AssemblyInfo.RepositoryUri.Length - 4);
                        }
                    }
                }
            }

            string build;

            if (string.IsNullOrEmpty(AssemblyInfo.BuildId) && Build.TryExecute("git", out build, "rev-list HEAD --count"))
            {
                AssemblyInfo.BuildId = build.Trim();
            }
        }

        public static void SaveInfo(string path)
        {
            // determine if the path exists
            if (string.IsNullOrEmpty(path))
            {
                // throw an exception, since we need a path to be able to save the info
                throw new ArgumentNullException("A path must be specified in order to save version info..", path);
            }

            // parse the version
            var version = System.Version.Parse(AssemblyInfo.FileVersion);

            // determine if the informational version is not specified
            if (string.IsNullOrEmpty(AssemblyInfo.InformationalVersion))
            {
                // create an informational version which includes the revision number as a tag
                AssemblyInfo.InformationalVersion = string.Format
                    (@"{0}.{1}.{2}-{3}", version.Major, version.Minor, version.Build, version.Revision);
            }

            string contents = null;

            if (File.Exists(path))
            {
                // read the contents of the file
                contents = File.ReadAllText(path).Trim();
            }

            if (string.IsNullOrEmpty(contents))
            {
                Build.MakeDirectory(Path.GetDirectoryName(path));

                // create a string builder used to create the content
                var builder = new StringBuilder();

                // append the auto generated documentation header
                builder.AppendLine("//------------------------------------------------------------------------------");
                builder.AppendLine("// <auto-generated>");
                builder.AppendLine("// This code was generated by a tool.");
                builder.AppendLine("// </auto-generated>");
                builder.AppendLine("//------------------------------------------------------------------------------");
                builder.AppendLine();

                // add the system namespace
                builder.AppendLine("using System;");

                // add the reflection namespace
                builder.AppendLine("using System.Reflection;");
                builder.AppendLine();

                // save the builder to the contents
                contents = builder.ToString();
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.Product))
            {
                contents = AssemblyInfo.AttributeReplace(contents, "AssemblyProduct", AssemblyInfo.Product);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.Company))
            {
                contents = AssemblyInfo.AttributeReplace(contents, "AssemblyCompany", AssemblyInfo.Company);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.Copyright))
            {
                contents = AssemblyInfo.AttributeReplace(contents, "AssemblyCopyright", AssemblyInfo.Copyright);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.AssemblyVersion))
            {
                contents = AssemblyInfo.AttributeReplace(contents, "AssemblyVersion", AssemblyInfo.AssemblyVersion + ".0");
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.FileVersion))
            {
                contents = AssemblyInfo.AttributeReplace(contents, "AssemblyFileVersion", AssemblyInfo.FileVersion);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.InformationalVersion))
            {
                contents = AssemblyInfo.AttributeReplace(contents, "AssemblyInformationalVersion", AssemblyInfo.InformationalVersion);
            }

            contents = AssemblyInfo.MetadataReplace(contents, "BuildDateUtc", AssemblyInfo.BuildDateUtc);

            if (!string.IsNullOrEmpty(AssemblyInfo.Branch))
            {
                contents = AssemblyInfo.MetadataReplace(contents, "Branch", AssemblyInfo.Branch);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.BuildId))
            {
                contents = AssemblyInfo.MetadataReplace(contents, "BuildId", AssemblyInfo.BuildId);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.CommitId))
            {
                contents = AssemblyInfo.MetadataReplace(contents, "CommitId", AssemblyInfo.CommitId);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.BuiltBy))
            {
                contents = AssemblyInfo.MetadataReplace(contents, "BuiltBy", AssemblyInfo.BuiltBy);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.BuiltOn))
            {
                contents = AssemblyInfo.MetadataReplace(contents, "BuiltOn", AssemblyInfo.BuiltOn);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.TeamUri))
            {
                contents = AssemblyInfo.MetadataReplace(contents, "TeamUri", AssemblyInfo.TeamUri);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.RepositoryUri))
            {
                contents = AssemblyInfo.MetadataReplace(contents, "RepositoryUri", AssemblyInfo.RepositoryUri);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.BuildUri))
            {
                contents = AssemblyInfo.MetadataReplace(contents, "BuildUri", AssemblyInfo.BuildUri);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.License))
            {
                contents = AssemblyInfo.MetadataReplace(contents, "License", AssemblyInfo.License);
            }

            if (!string.IsNullOrEmpty(AssemblyInfo.LicenseUri))
            {
                contents = AssemblyInfo.MetadataReplace(contents, "LicenseUri", AssemblyInfo.LicenseUri);
            }

            File.WriteAllText(path, contents);
        }

        private static string AttributeReplace(string contents, string name, string value)
        {
            var expression = string.Format(AttributeExpression, name);

            var format = string.Format(ValueFormat, value);

            var regex = new Regex(expression);

            if (!regex.IsMatch(contents))
            {
                contents = string.Concat(contents, Environment.NewLine, string.Format(AttributeFormat, name, value));
                return contents;
            }

            return regex.Replace(contents, format, 1);
        }

        private static string MetadataReplace(string contents, string name, string value)
        {
            var expression = string.Format(MetadataExpression, name);
            var format = string.Format(ValueFormat, value);

            var regex = new Regex(expression);

            if (!regex.IsMatch(contents))
            {
                contents = string.Concat(contents, Environment.NewLine, string.Format(MetadataFormat, name, value));
                return contents;
            }

            return regex.Replace(contents, format, 1);
        }

        private static string FindBranch(string path)
        {
            if (!Directory.Exists(path))
            {
                return null;
            }

            foreach (var branch in Directory.GetFiles(path))
            {
                var head = File.ReadAllText(branch).Trim();

                if (string.Equals(AssemblyInfo.CommitId, head))
                {
                    return Path.GetFileName(branch).Trim();
                }

                foreach(var part in Directory.GetDirectories(path))
                {
                    var current = AssemblyInfo.FindBranch(part);

                    if (current != null)
                    {
                        return Path.GetFileName(part) + '/' + current;
                    }
                }
            }

            return null;
        }
    }
}