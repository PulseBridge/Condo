@{/*

msbuild-locate
    Locates the msbuild command line utility available on the current path, or by searching known locations on the Windows platform.

*/}

use namespace = 'System'
use namespace = 'Microsoft.Win32'

use import = 'Condo.Build'

@{
    Build.Log.Header("msbuild-locate");

    if (Build.Unix)
    {
        Build.Log.Warn("msbuild-locate: msbuild is only available on the Windows platform at the present time.");
    }
    else
    {
        var tools_registry_path = @"SOFTWARE\Microsoft\MSBuild\ToolsVersions";
        var msbuild_path_name = "msbuild_";
        var msbuild_path_key_name = "MSBuildToolsPath";

        var tools_registry_key = Registry.LocalMachine.OpenSubKey(tools_registry_path);

        if (tools_registry_key == null)
        {
            throw new NotSupportedException("msbuild-locate: could not find an instance of msbuild -- the build process cannot continue.");
        }

        var version_registry_keys = tools_registry_key.GetSubKeyNames();

        var found = false;

        var msbuild_max_version = new Version();
        var msbuild_max_version_path = string.Empty;

        foreach (var version_registry_key in version_registry_keys)
        {
            var version_registry_path = tools_registry_path + "\\" + version_registry_key;
            var current_registry_key = Registry.LocalMachine.OpenSubKey(version_registry_path);

            var msbuild_version_name = msbuild_path_name + version_registry_key;
            var msbuild_version_path = current_registry_key.GetValue(msbuild_path_key_name) as string;

            if (!string.IsNullOrEmpty(msbuild_version_path))
            {
                found = true;

                Version msbuild_current_version;

                Build.SetPath(msbuild_version_name, msbuild_version_path, true);

                if (Version.TryParse(version_registry_key, out msbuild_current_version) && msbuild_current_version > msbuild_max_version)
                {
                    msbuild_max_version = msbuild_current_version;
                    msbuild_max_version_path = msbuild_version_path;
                }
            }
        }

        if (!found)
        {
            throw new NotSupportedException("msbuild-locate: could not find an instance of msbuild -- the build process cannot continue.");
        }

        Build.SetPath(msbuild_path_name + "latest", msbuild_max_version_path, true);

        Build.Log.Argument("version", msbuild_max_version);
        Build.Log.Argument("path", msbuild_max_version_path);
    }

    Build.Log.Header();
}