@{/*

vstest
    Executes the vstest command line utility for the specified test libraries.

vstest_tests=''
    A comma separated list of tests to execute.

vstest_test_path=''
    A space delimited list of test libraries to execute.

vstest_output_path='$(target_test_path)'
    The path to which to emit test results.

vstest_adapter_path='$(working_path)\packages'
    The path for custom adapters to use when executing vstest.

vstest_settings_path=''
    The path to the settings file to use when executing vstest.

vstest_coverage='$(Coverage)'
    A value indicating whether or not to perform code coverage analysis.

vstest_isolate='false'
    A value indicating whether or not to isolate the test process.

vstest_enable_vsix='true'
    A value indicating whether or not to enable vsix extensions when executing tests.

vstest_architecture='x86'
    The architecture to use when executing vstest.

vstest_filter=''
    The filter to use when executing tests.

vstest_args=''
    The arguments to pass to the vstest command line utility.

target_path='$(working_path)/artifacts'
    The target path for build artifacts.

target_test_path='$(target_path)/test'
    The path in which to locate test projects.

base_path='$(CurrentDirectory)'
    The base path in which to execute vstest.

working_path='$(base_path)'
    The working path in which to execute vstest.

vstest_wait='true'
    A value indicating whether or not to wait for exit.

vstest_quiet='$(Build.Log.Quiet)'
    A value indicating whether or not to execute the command quietly.

*/}

use namespace = 'System'

use import = 'Condo.Build'
use import = 'Condo.AssemblyInfo'

default base_path               = '${ Directory.GetCurrentDirectory() }'
default working_path            = '${ base_path }'
default target_path             = '${ Build.Get("BUILD_BINARIESDIRECTORY", Path.Combine(base_path, "artifacts")) }'
default target_test_path        = '${ Build.Get("COMMON_TESTRESULTSDIRECTORY", Path.Combine(target_path, "test")) }'

default Quiet                   = '${ Build.Log.Quiet }'
default Coverage                = '${ false }'

default configuration           = 'Debug'
default platform                = 'x86'

default vstest_test_path        = ''
default vstest_output_path      = '${ target_test_path }'
default vstest_adapter_path     = '${ Path.Combine(working_path, "packages") }'
default vstest_settings_path    = ''
default vstest_coverage         = '${ Coverage }'
default vstest_isolate          = '${ false }'
default vstest_enable_vsix      = '${ true }'
default vstest_architecture     = 'x86'
default vstest_filter           = ''
default vstest_args             = ''

vstest-locate once='vstest-locate'
info-collect once='info-collect'

var vstest_cmd                  = '${ Build.GetPath("vstest") }'

@{
    Build.Log.Header("vstest");

    if (string.IsNullOrEmpty(vstest_test_path))
    {
        throw new ArgumentException("vstest: a test path is required.");
    }

    if (vstest_cmd == null)
    {
        throw new ArgumentException("vstest: vstest.console.exe could not be found.");
    }

    Build.Log.Argument("arguments", vstest_args);

    vstest_args = (vstest_test_path + ' ' + vstest_args).Trim();

    if (!string.IsNullOrEmpty(vstest_adapter_path))
    {
        vstest_args += " /TestAdapterPath:\"" + vstest_adapter_path + "\"";
    }

    if (vstest_coverage)
    {
        vstest_args += " /EnableCodeCoverage";
    }

    if (vstest_isolate)
    {
        vstest_args += " /InIsolation";
    }

    if (vstest_enable_vsix)
    {
        vstest_args += " /UseVsixExtensions:true";
    }

    if (!string.IsNullOrEmpty(vstest_filter))
    {
        vstest_args += " /TestCaseFilter:\"" + vstest_filter + "\"";
    }

    if (!string.IsNullOrEmpty(vstest_settings_path))
    {
        vstest_args += " /Settings:\"" + vstest_settings_path + "\"";
    }

    if (!string.IsNullOrEmpty(vstest_architecture))
    {
        vstest_args += " /Platform:" + vstest_architecture;
    }

    if (Build.TFS)
    {
        vstest_args += " /logger:TFSPublisher"
            + ";Collection=\"" + AssemblyInfo.TeamUri + "\""
            + ";BuildName=\"" + AssemblyInfo.BuildName + "\""
            + ";TeamProject=\"" + AssemblyInfo.TeamProject + "\""
            + ";Platform=\"" + platform + "\""
            + ";Flavor=\"" + configuration + "\""
            + ";RunTitle=\"" + AssemblyInfo.Product + "-" + AssemblyInfo.InformationalVersion + "\"";
    }
    else
    {
        vstest_args += " /logger:trx";
    }

    vstest_args = vstest_args.Trim();

    Build.Log.Argument("test path", vstest_test_path);
    Build.Log.Argument("output path", vstest_output_path);
    Build.Log.Argument("adapter path", vstest_adapter_path);
    Build.Log.Argument("settings path", vstest_settings_path);
    Build.Log.Argument("coverage", vstest_coverage);
    Build.Log.Argument("isolate", vstest_isolate);
    Build.Log.Argument("enable vsix", vstest_enable_vsix);
    Build.Log.Argument("architecture", vstest_architecture);
    Build.Log.Argument("filter", vstest_filter);
    Build.Log.Header();
    
    Build.MakeDirectory(target_test_path);
}

exec exec_cmd='${ vstest_cmd.Path }' exec_args='${ vstest_args }' exec_path='${ target_test_path }'