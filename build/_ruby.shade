@{/*

ruby
    Executes the ruby command line tool.

ruby_args=''
    Required. The arguments used to execute the command.

ruby_options='-e'
    The options used to execute the command.

ruby_path='$(working_path)'
    The path in which to execute the command.

base_path='$(CurrentDirectory)'
    The base path in which to execute the nuget package manager command line tool.

working_path='$(base_path)'
    The working path in which to execute the nuget package manager command line tool.

ruby_wait='true'
    A value indicating whether or not to wait for exit.

ruby_quiet='$(Build.Log.Quiet)'
    A value indicating whether or not to avoid printing output.

*/}

default base_path       = '${ Directory.GetCurrentDirectory() }'
default working_path    = '${ base_path }'

default ruby_args           = ''
default ruby_options        = ''
default ruby_path           = '${ working_path }'
default ruby_wait           = '${ true }'
default ruby_quiet          = '${ Build.Log.Quiet }'

ruby-locate once='ruby-locate'

@{
    Build.Log.Header("ruby");

    var ruby_cmd = Build.GetPath("ruby");

    if (!ruby_cmd.Global)
    {
        Build.Log.Warn("ruby: is not available on the system -- the command will not be executed.");
    }

    Build.Log.Argument("arguments", ruby_args);
    Build.Log.Argument("options", ruby_options);
    Build.Log.Argument("path", ruby_path);
    Build.Log.Argument("wait", ruby_wait);
    Build.Log.Argument("quiet", ruby_quiet);
    Build.Log.Header();

    ruby_args="'" + ruby_args + "'";
}

exec exec_cmd='${ ruby_cmd.Path }' exec_args='${ ruby_options } ${ ruby_args }' exec_path='${ ruby_path }' exec_redirect='${ false }' if='ruby_cmd.Global'