@{/*

msbuild
    Executes msbuild for the projects specified

msbuild_project=''
    Required. The project to build using msbuild.

msbuild_targets='build'
    A semi-colon delimited list of target(s) to execute using msbuild.

msbuild_configuration='$(configuration)'
    A semi-colon (;) delimited list of configurations to build.

msbuild_platform='$(platform)'
    A semi-colon (;) delimited list of platforms to build.

msbuild_properties=''
    A semi-colon delimited list of properties to use when executing msbuild.

msbuild_version='latest'
    The version of msbuild to use. If not specified; the latest available version will be used.

msbuild_args=''
    The command line arguments used to execute msbuild. Note: The project, targets, configuration, platform, and properties
    variables will be automatically included in the arguments. Do not specify them multiple times.

,sbio;d_output_path='$(target_path)/build'
    The path in which to store the resulting builds.

msbuild_path='$(working_path)'
    The path in which to execute the msbuild.

base_path='$(CurrentDirectory)'
    The base path in which to execute msbuild.

working_path='$(base_path)'
    The working path in which to execute msbuild.

target_path='$(working_path)/artifacts'
    The target path for build artifacts.

*/}

use namespace = 'System'
use namespace = 'System.IO'

use import = 'Condo.Build'

default configuration               = '${ Build.Get("CONFIGURATION", "Debug") }'

msbuild-locate once='msbuild-locate'

default base_path                   = '${ Directory.GetCurrentDirectory() }'
default working_path                = '${ base_path }'
default target_path                 = '${ Build.Get("BUILD_BINARIESDIRECTORY", Path.Combine(base_path, "artifacts")) }'
default target_build_path           = '${ Path.Combine(target_path, "build") }'
default target_sites_path           = '${ Path.Combine(target_path, "sites") }'

default msbuild_output_path         = '${ target_build_path }'
default msbuild_sites_path          = '${ target_sites_path }'

default msbuild_project             = ''
default msbuild_targets             = 'build'
default msbuild_configuration       = '${ configuration }'
default msbuild_platform            = '${ platform }'
default msbuild_properties          = ''
default msbuild_version             = 'latest'
default msbuild_args                = ''

default msbuild_path                = '${ working_path }'

default msbuild_cmd                 = '${ Build.GetPath("msbuild_" + msbuild_version) }'
default msbuild_cmd_path            = ''

@{
    Build.Log.Header("msbuild");

    if (string.IsNullOrEmpty(msbuild_project))
    {
        throw new ArgumentException("msbuild: msbuild_project must be specified.");
    }

    if (Build.Windows)
    {
        if (msbuild_cmd == null)
        {
            throw new ArgumentException("msbuild: msbuild executable could not be found for the specified version.");
        }

        msbuild_cmd_path = msbuild_cmd.Path;

        if (!msbuild_cmd_path.EndsWith("msbuild.exe", StringComparison.OrdinalIgnoreCase))
        {
            if (!msbuild_cmd_path.EndsWith(Path.DirectorySeparatorChar.ToString()))
            {
                msbuild_cmd_path += Path.DirectorySeparatorChar;
            }

            msbuild_cmd_path += "msbuild.exe";
        }
    }

    Build.Log.Argument("path", msbuild_cmd_path);
    Build.Log.Argument("version", msbuild_version);
    Build.Log.Argument("project", msbuild_project);
    Build.Log.Argument("targets", msbuild_targets);
    Build.Log.Argument("configuration", msbuild_configuration);
    Build.Log.Argument("platform", msbuild_platform);
    Build.Log.Argument("properties", msbuild_properties);
    Build.Log.Argument("arguments", msbuild_args);
    Build.Log.Argument("output path", msbuild_output_path);
    Build.Log.Argument("sites path", msbuild_sites_path);

    msbuild_args = (msbuild_project + " " + msbuild_args).Trim();

    if (!string.IsNullOrEmpty(msbuild_targets))
    {
        msbuild_args += " /t:" + msbuild_targets.TrimEnd(";"[0]);
    }

    if (!string.IsNullOrEmpty(msbuild_output_path))
    {
        msbuild_properties += "GenerateProjectSpecificOutputFolder=true;";
        msbuild_properties += "OutDir=\"" + msbuild_output_path + "\";";
    }

    if (!string.IsNullOrEmpty(msbuild_sites_path))
    {
        msbuild_properties += "SiteArtifactsRoot=\"" + msbuild_sites_path + "\";";
    }

    Build.Log.Argument("properties", msbuild_properties);

    if (!string.IsNullOrEmpty(msbuild_configuration))
    {
        msbuild_properties += "Configuration=\"" + msbuild_configuration + "\";";
    }

    if (!string.IsNullOrEmpty(msbuild_platform))
    {
        msbuild_properties += "Platform=\"" + msbuild_platform + "\";";
    }

    if (!string.IsNullOrEmpty(msbuild_properties))
    {
        msbuild_args += " /p:" + msbuild_properties.TrimEnd(";"[0]);
    }

    msbuild_args = msbuild_args.Trim();

    Build.Log.Header();

    if (Build.Unix)
    {
        Build.Log.Warn("msbuild-locate: msbuild is only available on the Windows platform at the present time.");
    }
}

exec exec_cmd='${ msbuild_cmd_path }' exec_args='${ msbuild_args }' if='Build.Windows'