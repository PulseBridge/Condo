@{/*

brew
    Executes the brew package manager on OS X.

brew_args=''
    Required. The arguments used to execute brew.

brew_options='' (Environment Variable: BREW_OPTIONS)
    Additional options to use when executing brew.

brew_path='$(working_path)'
    The path in which to execute brew.

base_path='$(CurrentDirectory)'
    The base path in which to execute brew.

working_path='$(base_path)'
    The working path in which to execute brew.

brew_wait='true'
    A value indicating whether or not to wait for exit.

brew_quiet='$(Build.Log.Quiet)'
    A value indicating whether or not to avoid printing output.

*/}

use import = 'Condo.Build'

default base_path       = '${ Directory.GetCurrentDirectory() }'
default working_path    = '${ base_path }'

default brew_args       = ''
default brew_options    = '${ Build.Get("BREW_OPTIONS") }'
default brew_path       = '${ working_path }'
default brew_wait       = '${ true }'
default brew_quiet      = '${ Build.Log.Quiet }'

brew-download once='brew-download'

@{
    Build.Log.Header("brew");

    if (string.IsNullOrEmpty(brew_args))
    {
        throw new ArgumentException("brew: required arguments were not specified.", "brew_args");
    }

    brew_args = brew_args.Trim();
    brew_options = brew_options.Trim();

    Build.Log.Argument("arguments", brew_args);
    Build.Log.Argument("options", brew_options);
    Build.Log.Argument("path", brew_path);
    Build.Log.Argument("wait", brew_wait);
    Build.Log.Argument("quiet", brew_quiet);
    Build.Log.Header();
}

exec exec_cmd='brew' exec_args='${ brew_options } ${ brew_args }' exec_wait='${ brew_wait }' exec_quiet='${ brew_quiet }' exec_redirect='${ false }'