@{/*

nuget-restore
    Executes a nuget package manager command to restore all available packages.

nuget_restore_args=''
    The arguments to pass to the nuget command line tool (in addition to restore)

nuget_restore_options='' (Environment Variable: NUGET_RESTORE_OPTIONS)
    Additional options to include when executing the nuget command line tool for the restore operation.

nuget_restore_path='$(working_path)'
    The path in which to execute the nuget command line tool.

nuget_restore_packages_path='$(nuget_restore_path)\packages'
    The path in which to contain restored packages.

nuget_config_path='$(nuget_download_path)/nuget.config'
    The path to the nuget configuration file to use when executing nuget commands.

base_path='$(CurrentDirectory)'
    The base path in which to execute the nuget command line tool.

working_path='$(base_path)'
    The working path in which to execute the nuget command line tool.

nuget_download_path='$(base_path)/.nuget'
    The path in which to install nuget.

*/}

use namespace = 'System'
use namespace = 'System.IO'

use import = 'Condo.Build'

default base_path               = '${ Directory.GetCurrentDirectory() }'
default working_path            = '${ base_path }'

default nuget_restore_args      = ''
default nuget_restore_options   = '${ Build.Get("NUGET_RESTORE_OPTIONS") }'
default nuget_restore_path      = '${ working_path }'
default nuget_restore_packages_path = '${ Path.Combine(working_path, "packages") }'
default nuget_download_path     = '${ Path.Combine(base_path, ".nuget") }'
default nuget_root_config_path  = '${ Path.Combine(base_path, "nuget.config") }'
default nuget_config_path       = '${ Path.Combine(nuget_download_path, "nuget.config") }'

@{
    Build.Log.Header("nuget-restore");
    Build.Log.Argument("arguments", nuget_restore_args);
    Build.Log.Argument("options", nuget_restore_options);

    if (File.Exists(nuget_config_path))
    {
        nuget_restore_options += " -ConfigFile \"" + nuget_config_path + "\"";
    }
    else if (File.Exists(nuget_root_config_path))
    {
        nuget_restore_options += " -ConfigFile \"" + nuget_root_config_path + "\"";
    }
    else
    {
        nuget_config_path = "";
    }

    if (!string.IsNullOrEmpty(nuget_restore_packages_path))
    {
        if (!Directory.Exists(nuget_restore_packages_path))
        {
            Directory.CreateDirectory(nuget_restore_packages_path);
        }

        nuget_restore_options += " -PackagesDirectory \"" + nuget_restore_packages_path + "\"";
    }

    nuget_restore_options = nuget_restore_options.Trim();

    Build.Log.Argument("config path", nuget_config_path);
    Build.Log.Argument("root config path", nuget_root_config_path);
    Build.Log.Argument("packages path", nuget_restore_packages_path);
    Build.Log.Header();
}

nuget nuget_args='restore ${ nuget_restore_args }' nuget_options='${ nuget_restore_options }' nuget_path='${ nuget_restore_path }'