@{/*

dotnet-pack
    Executes a dotnet package manager command to pack all available projects.

dotnet_pack_path='$(working_path)'
    Required. The path in which to execute the dotnet command line tool.

dotnet_pack_project=''
    A semi-colon (;) delimited list of projects to pack using the dotnet command line tool.

dotnet_pack_framework=''
    A semi-colon (;) delimited list of target frameworks to build against.

dotnet_pack_configuration='$(configuration)'
    A semi-colon (;) delimited list of configurations to pack.

dotnet_pack_options='' (Environment Variable: DOTNET_PACK_OPTIONS)
    Additional options to include when executing the dotnet command line tool for pack operations.

dotnet_pack_output_path='$(target_path)/build'
    The path in which to store the resulting packages (the name of the project will always be appended).

base_path='$(CurrentDirectory)'
    The base path in which to execute the dotnet command line tool.

working_path='$(base_path)'
    The working path in which to execute the dotnet command line tool.

target_path='$(working_path)/artifacts'
    The target path for build artifacts.

configuration=''
    The default configurations to use if no configurations are specified.

*/}

use namespace = 'System'
use namespace = 'System.IO'

use import = 'Condo.Build'

default configuration           = ''

default base_path               = '${ Directory.GetCurrentDirectory() }'
default working_path            = '${ base_path }'
default target_path             = '${ Path.Combine(base_path, "artifacts") }'

default dotnet_pack_path           = '${ working_path }'
default dotnet_pack_output_path    = '${ Path.Combine(target_path, "build") }'
default dotnet_pack_project        = ''
default dotnet_pack_framework      = ''
default dotnet_pack_configuration  = '${ configuration }'
default dotnet_pack_options        = '${ Build.Get("DOTNET_PACK_OPTIONS") }'

@{
    Build.Log.Header("dotnet-pack");

    if (!string.IsNullOrEmpty(dotnet_pack_project))
    {
        dotnet_pack_project = dotnet_pack_project.Trim();
    }

    if (!string.IsNullOrEmpty(dotnet_pack_options))
    {
        dotnet_pack_options = dotnet_pack_options.Trim();
    }

    var dotnet_pack_name = File.Exists(dotnet_pack_path)
        ? Path.GetDirectoryName(dotnet_pack_path)
        : Path.GetFileName(dotnet_pack_path);

    dotnet_pack_output_path = Path.Combine(dotnet_pack_output_path, dotnet_pack_name);

    Build.Log.Argument("path", dotnet_pack_path);
    Build.Log.Argument("project", dotnet_pack_project);
    Build.Log.Argument("framework", dotnet_pack_framework);
    Build.Log.Argument("configuration", dotnet_pack_configuration);
    Build.Log.Argument("options", dotnet_pack_options);
    Build.Log.Argument("output path", dotnet_pack_output_path);
    Build.Log.Header();

    dotnet_pack_project = dotnet_pack_project.Replace(';', ' ').Trim();

    if (!string.IsNullOrEmpty(dotnet_pack_output_path))
    {
        dotnet_pack_options += string.Format(@" --out ""{0}""", dotnet_pack_output_path);
    }

    if (!string.IsNullOrEmpty(dotnet_pack_framework))
    {
        dotnet_pack_options += string.Format(@" --framework ""{0}""", dotnet_pack_framework);
    }

    if (!string.IsNullOrEmpty(dotnet_pack_configuration))
    {
        dotnet_pack_options += string.Format(@" --configuration ""{0}""", dotnet_pack_configuration);
    }

    dotnet_pack_options = dotnet_pack_options.Trim();
}

dnu dnu_args='pack ${ dotnet_pack_project }' dnu_options='${ dotnet_pack_options }' dnu_runtime='default -r ${ Build.Unix ? "mono" : "clr" }' dnu_path='${ dotnet_pack_path }'