@{/*

brew-download
    Downloads and installs homebrew on an OS X system.

base_path='$(CurrentDirectory)'
    The base path in which to download brew.

working_path='$(base_path)'
    The working path in which to download brew.

*/}

use namespace = 'System'
use namespace = 'System.IO'
use namespace = 'System.Net'

use import = 'Condo.Build'

@{
    Build.Log.Header("brew-download");

    if (!Build.OSX)
    {
        throw new NotSupportedException("brew-download: brew is only available on OS X-based systems.");
    }

    var brew_version    = string.Empty;
    var brew_installed  = Build.TryExecute("brew", out brew_version, "--version");
    var brew_url        = "https://raw.githubusercontent.com/Homebrew/install/master/install";
    var brew_download   = Path.Combine(working_path, "brew.rb");

    // determine if brew was not installed and download the script
    if (!brew_installed)
    {
        try
        {
            // create a new web client
            var client = new WebClient();

            // download the brew script
            client.DownloadFile(brew_url, brew_download);

            // execute ruby to install the script
            ExecuteRuby(brew_download);

            // determine if brew was successfully installed
            if (!Build.TryExecute("brew", out brew_version, "--version"))
            {
                throw new Exception("brew-download: brew failed to download or install successfully.");
            }
        }
        catch (Exception netEx)
        {
            throw new Exception("brew-download: brew failed to download or install successfully.", netEx);
        }
        finally
        {
            if (File.Exists(brew_download))
            {
                // delete the download
                File.Delete(brew_download);
            }
        }
    }

    Build.Log.Argument("version", brew_version);
    Build.Log.Header();
}